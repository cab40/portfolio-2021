{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6ad01c3b-70af-5faa-a4fe-a80f57eb825d","frontmatter":{"demo":"//github-readme-stats.vercel.app/api/?username=anuraghazra","excerpt":"Locall helps members of a neighbourhood get in contact and share any tasks that they may need help with. Users can browse through these tasks, and offer to help their neighbours. Those who post the tasks can also choose to offer payment for these services. It's hard to trust just anyone to help you out with daily tasks, but you can always count on your neighbours! Created with Flutter and coded in Dart, this iOS app is the 3rd place winner of McMaster's DeltaHacks 7.","iframe":"https://cab40.github.io/Portfolio-2020/img/Locall.jpeg","src":"https://github.com/cab40/Locall","title":"Locall"},"fields":{"slug":"/case-studies/locall"}}},{"node":{"id":"c7d6a33a-fbbf-5da6-853a-31308397cf79","frontmatter":{"demo":"//bugvilla.herokuapp.com/","excerpt":"ampl.io allows users to keep track of daily, weekly, or monthly goals through a self and peer monitored accountability system. When setting a goal, users can add friends or match with members of the ampl.io community with similar aims. Individuals can easily monitor and check off their own growth, as well as their group's progress on various goals.","iframe":"https://cab40.github.io/Portfolio-2020/img/amplio-cover-shdw.jpg","src":"//github.com/cab40/Ampl.io","title":"ampl.io"},"fields":{"slug":"/case-studies/ampl-io"}}},{"node":{"id":"8539e2df-0bab-579c-9ab3-29e6584040d5","frontmatter":{"demo":"https://devpost.com/software/tbd-k9zjah","excerpt":"it's lit is a hardware game with a web UI which allows users to vibe along to colourful lights and music. From the React website users can select a song then redirect their attention to the physical hardware. They will try to tap the buttons to incoming LEDs as they appear, which also match up with the beats of the song. At the end of the song, the user’s accuracy will be displayed on the website screen, so that they can continue to improve their performance!","iframe":"https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/001/664/154/datas/gallery.jpg","src":"https://github.com/cab40/Its-Lit","title":"it's lit"},"fields":{"slug":"/case-studies/it-s-lit"}}},{"node":{"id":"d583e98b-0aa1-5d92-b7ee-33cec5d0c071","frontmatter":{"demo":"//anuraghazra.github.io/ShaderExpo","excerpt":"We wanted to find a way to maximize the quality of the online dating in a fun, and more competitive web environment. Our solution? A Bachelor/Bachelorette style dating site which, while still including quick match features found in apps like Tinder and Bumble, takes this up a level by forming groups out of these matched users to then compete to conclude the most compatible match.","iframe":"https://cab40.github.io/Portfolio-2020/img/hive.jpeg","src":"https://github.com/RaymondR-Wu/the-bachelor-htn","title":"Hive"},"fields":{"slug":"/case-studies/hive"}}},{"node":{"id":"cee5faf2-ce86-5640-8575-f42945573dc1","frontmatter":{"demo":"//anuraghazra.github.io/GyroDodge/","excerpt":"Using C, I created a program which parses a dataset of linear systems, solves them, properly reduces the fraction answers, and finally sorts all computed answers. The initial steps of the program consist of file handling; accessing the data from a text file and prepping an output file for all the solved linear systems. The linear systems are then parsed from the provided dataset and the fractions are then further parsed into their own FractionType structure.","iframe":"https://cab40.github.io/Portfolio-2020/img/lss.png","src":"https://github.com/cab40/Linear-system-solver","title":"Linear System Parser"},"fields":{"slug":"/case-studies/linear-system-parser"}}},{"node":{"id":"95d889cd-bc78-5116-a8af-93d9b426b9ed","frontmatter":{"demo":"//anuraghazra.github.io/EvolutionAquerium","excerpt":"Based off data used in Michelle Craig’s “Personalized Book Recommendation System” I created a Ruby program which reports the book most similar to a specific title based on user ratings. This is done through treating each book’s ratings as a vector and finding the cosine angle between these two vectors. Ratings range from -5 (hated it), to 0 (no rating), to 5 (loved it). As there are cases in which books have different numbers of ratings, the denominator normalizes the score.","iframe":"https://cab40.github.io/Portfolio-2020/img/book-output.png","src":"https://github.com/cab40/book-recommendations","title":"Book Recommendation System"},"fields":{"slug":"/case-studies/book-recommendation-system"}}}]}}}